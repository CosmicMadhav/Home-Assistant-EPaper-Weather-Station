esphome:
  name: dispalyy
  friendly_name: Dispalyy

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "kXP53bnHfvpzXsKViq5YeV+X+tM2hIeyWV6nrY93cp0="

ota:
  - platform: esphome
    password: "b736a07344a3fb4e8a7ea158936f0df7"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dispalyy Fallback Hotspot"
    password: "JaRyGKmXukcj"

captive_portal:

font:
  # Time and date fonts
  - file: "gfonts://Inter@700"
    id: font_time_large
    size: 70
  - file: "gfonts://Inter@700"
    id: font_date_medium
    size: 30
  # Content fonts
  - file: "gfonts://Inter@500"
    id: font_heading
    size: 26
  - file: "gfonts://Inter"
    id: font_content
    size: 23
  # Weather icons
  - file: "/config/Fonts/materialdesignicons-webfont.ttf"
    id: font_weather
    size: 60
    glyphs: &mdi-glyphs
      - "\U000F050F" # Thermometer
      - "\U000F058E" # Humidity
      - "\U000F059D" # Wind speed
      - "\U000F0D60" # Pressure
      - "\U000F0590" # Cloudy
      - "\U000F0596" # Rainy
      - "\U000F0598" # Snowy
      - "\U000F0599" # Sunny
      - "\U000F06E8" # Light on
      - "\U000F06E9" # Light off

# Keep all your existing text_sensor, sensor, and binary_sensor definitions
text_sensor:
  - platform: homeassistant
    id: ha_calendar_event_1
    entity_id: calendar.calendar
    attribute: "message"
  - platform: homeassistant
    id: ha_calendar_start_time_1
    entity_id: calendar.calendar
    attribute: "start_time"
  - platform: homeassistant
    id: ha_calendar_end_time_1
    entity_id: calendar.calendar
    attribute: "end_time"
  - platform: homeassistant
    id: ha_calendar_event_2
    entity_id: calendar.epaper_event
    attribute: "message"
  - platform: homeassistant
    id: ha_calendar_start_time_2
    entity_id: calendar.epaper_event
    attribute: "start_time"
  - platform: homeassistant
    id: ha_calendar_end_time_2
    entity_id: calendar.epaper_event
    attribute: "end_time"
  - platform: homeassistant
    id: ha_calendar_event_3
    entity_id: calendar.new_calendar
    attribute: "message"
  - platform: homeassistant
    id: ha_calendar_start_time_3
    entity_id: calendar.new_calendar
    attribute: "start_time"
  - platform: homeassistant
    id: ha_calendar_end_time_3
    entity_id: calendar.new_calendar
    attribute: "end_time"
  - platform: homeassistant
    entity_id: weather.forecast_home
    id: weather_condition
    attribute: condition

sensor:
  - platform: homeassistant
    id: room_temp
    entity_id: sensor.relay_room_temperature
  - platform: homeassistant
    entity_id: weather.forecast_home
    id: weather_temp
    attribute: temperature
  - platform: homeassistant
    entity_id: weather.forecast_home
    id: weather_humidity
    attribute: humidity
  - platform: homeassistant
    entity_id: weather.forecast_home
    id: weather_pressure
    attribute: pressure
  - platform: homeassistant
    entity_id: weather.forecast_home
    id: weather_wind_speed
    attribute: wind_speed

binary_sensor:
  - platform: homeassistant
    id: relay_1
    entity_id: switch.relay_relay_1  # Updated to match your entity
  - platform: homeassistant
    id: relay_2
    entity_id: switch.relay_relay_2  # Updated to match your entity
  - platform: homeassistant
    id: relay_3
    entity_id: switch.relay_relay_3  # Updated to match your entity
  - platform: homeassistant
    id: relay_4
    entity_id: switch.relay_relay_4  # Updated to match your entity
  - platform: homeassistant
    id: relay_5
    entity_id: switch.relay_relay_5  # Updated to match your entity
  - platform: homeassistant
    id: relay_6
    entity_id: switch.relay_relay_6  # Updated to match your entity

spi:
  clk_pin: GPIO8
  mosi_pin: GPIO10

time:
  - platform: homeassistant
    id: homeassistant_time

display:
  - platform: waveshare_epaper
    cs_pin: GPIO3
    dc_pin: GPIO5
    busy_pin: GPIO4
    reset_pin: GPIO2
    model: 7.50inv2
    update_interval: 30s
    lambda: |-
      it.fill(COLOR_OFF);
      auto t = id(homeassistant_time).now();

      // ===== CALCULATED DIMENSIONS =====
      const int center_x = 400;
      const int header_height = 120;
      const int content_top = header_height + 10;
      const int left_panel_width = 380;
      const int right_panel_width = 400;

      // ===== HEADER SECTION =====
      it.printf(center_x, 15, id(font_time_large), TextAlign::TOP_CENTER, "%02d:%02d", t.hour, t.minute);
      
      const char* months[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun",
                            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
      const char* days[] = {"Sunday", "Monday", "Tuesday", "Wednesday",
                           "Thursday", "Friday", "Saturday"};
      
      char date_str[40];
      snprintf(date_str, sizeof(date_str), "%d%s %s %s",
              t.day_of_month,
              (t.day_of_month % 10 == 1 && t.day_of_month != 11) ? "st" : 
              (t.day_of_month % 10 == 2 && t.day_of_month != 12) ? "nd" : 
              (t.day_of_month % 10 == 3 && t.day_of_month != 13) ? "rd" : "th",
              months[t.month - 1],
              days[t.day_of_week - 1]);
      
      it.printf(center_x, 85, id(font_date_medium), TextAlign::TOP_CENTER, "%s", date_str);
      it.filled_rectangle(50, header_height, 700, 3, COLOR_ON);

      // ===== LIGHTS SECTION =====
      it.printf(50, content_top, id(font_heading), "LIGHTS");
      
      const int light_grid_top = content_top + 30;
      const int light_col1_x = 100;
      const int light_col2_x = 280;
      const int light_row_spacing = 130;
      const int icon_size = 60;
      const int label_offset = icon_size + 10;
      
      it.filled_rectangle(190, light_grid_top - 10, 3, light_row_spacing * 2, COLOR_ON);
      it.filled_rectangle(50, light_grid_top + light_row_spacing - 10, 330, 3, COLOR_ON);

      it.printf(light_col1_x, light_grid_top, id(font_weather), TextAlign::TOP_CENTER, 
               id(relay_1).state ? "\U000F06E8" : "\U000F06E9");
      it.printf(light_col1_x, light_grid_top + label_offset, id(font_content), 
               TextAlign::TOP_CENTER, "Light 1");
      
      it.printf(light_col2_x, light_grid_top, id(font_weather), TextAlign::TOP_CENTER, 
               id(relay_2).state ? "\U000F06E8" : "\U000F06E9");
      it.printf(light_col2_x, light_grid_top + label_offset, id(font_content), 
               TextAlign::TOP_CENTER, "Light 2");
      
      it.printf(light_col1_x, light_grid_top + light_row_spacing, id(font_weather), 
               TextAlign::TOP_CENTER, id(relay_3).state ? "\U000F06E8" : "\U000F06E9");
      it.printf(light_col1_x, light_grid_top + light_row_spacing + label_offset, 
               id(font_content), TextAlign::TOP_CENTER, "Light 3");
      
      it.printf(light_col2_x, light_grid_top + light_row_spacing, id(font_weather), 
               TextAlign::TOP_CENTER, id(relay_4).state ? "\U000F06E8" : "\U000F06E9");
      it.printf(light_col2_x, light_grid_top + light_row_spacing + label_offset, 
               id(font_content), TextAlign::TOP_CENTER, "Light 4");

      it.filled_rectangle(left_panel_width + 20, content_top, 4, 310, COLOR_ON);

      // ===== RIGHT PANEL =====
      const int right_panel_x = left_panel_width + 40;
      const int weather_start_y = content_top + 40;

      // Room Temperature (using sensor.relay_room_temperature)
      it.printf(right_panel_x, weather_start_y, id(font_heading), "TEMP");
      it.printf(right_panel_x + 70, weather_start_y, id(font_weather), "\U000F050F");
      if (!isnan(id(room_temp).state)) {
        it.printf(right_panel_x + 140, weather_start_y, id(font_content), "%.1f°C", id(room_temp).state);
      } else {
        it.printf(right_panel_x + 140, weather_start_y, id(font_content), "--");
      }

      // Weather in Ahmedabad (using weather.forecast_home)
      it.printf(right_panel_x, weather_start_y + 50, id(font_heading), "WEATHER IN AHMEDABAD");

      // Weather Parameters in Single Row
      const int param_spacing = 120;
      const int param_top = weather_start_y + 90;
      
      // Temperature (from weather entity)
      it.printf(right_panel_x, param_top, id(font_heading), "TEMP");
      it.printf(right_panel_x, param_top + 30, id(font_weather), "\U000F050F");
      it.printf(right_panel_x, param_top + 90, id(font_content), "%.1f°C", id(weather_temp).state);
      
      // Humidity (from weather entity)
      it.printf(right_panel_x + param_spacing, param_top, id(font_heading), "HUM");
      it.printf(right_panel_x + param_spacing, param_top + 30, id(font_weather), "\U000F058E");
      it.printf(right_panel_x + param_spacing, param_top + 90, id(font_content), "%.0f%%", id(weather_humidity).state);
      
      // Wind (from weather entity - converted from km/h to m/s)
      float wind_speed_ms = id(weather_wind_speed).state / 3.6; // Convert km/h to m/s
      it.printf(right_panel_x + param_spacing*2, param_top, id(font_heading), "WIND");
      it.printf(right_panel_x + param_spacing*2, param_top + 30, id(font_weather), "\U000F059D");
      it.printf(right_panel_x + param_spacing*2, param_top + 90, id(font_content), "%.1f m/s", wind_speed_ms);
      

      // ===== FOOTER =====
      it.filled_rectangle(0, 450, 800, 3, COLOR_ON);
      it.printf(center_x, 460, id(font_content), TextAlign::TOP_CENTER, 
               "Updated: %02d:%02d:%02d", t.hour, t.minute, t.second);